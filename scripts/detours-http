#!/usr/bin/env python
# -*- coding: utf-8 -*-

import SimpleHTTPServer
import SocketServer

import os

import socket
import json

from optparse import OptionParser
import ConfigParser

parser = OptionParser(
	usage="usage: %prog [options]",
	version="%prog 1.0.3"
)

parser.add_option(
	"-d", "--daemonize",
	action="store_true",
	dest="daemonize",
	default=False,
	help="run the process in the background"
)

parser.add_option(
	"-c", "--config",
	action="store",
	dest="config",
	default="/etc/detoursd.conf",
	help="Config File"
)

parser.add_option(
	"-p", "--port",
	action="store",
	dest="port",
	type="int",
	default=8080,
	help="Port to serve on"
)

(options, args) = parser.parse_args()

if not os.path.isfile( options.config ):
	parser.error( '%s is not a valid configuration file' % options.config )

config = ConfigParser.SafeConfigParser( { 'port': 8551 } )
config.read( options.config )

class DetoursHandler ( SimpleHTTPServer.SimpleHTTPRequestHandler ):

	header = """
<html>
	<head>
		<title>Detours</title>
		<style type="text/css">
			table { border-collapse: collapse; }
			th { background-color: #444; color: #EEE; }
			td, th { padding: 5px; border: 1px solid #777; }
			table.form th { text-align: right; }
			.footer { font-size: 10px; margin-top: 30px; }
		</style>
	</head>
	<body>
		<h1>Detours</h1>
"""

	footer = """
	<div class="footer">&copy; 2010 John Hobbs - <a href="http://github.com/jmhobbs/detours-clone">Detours v1.0.3</a></div>
	</body>
</html>
"""

	error_text = """
<h2>Error!</h2>

<p>The daemon did not respond, or responded with an error condition.</p>

"""

	def do_request ( self, request ):
		try:
			s = socket.socket( socket.AF_INET, socket.SOCK_STREAM )
			s.connect( ( '127.0.0.1', config.getint( 'Server', 'port' ) ) )
			s.send( json.dumps( request ) + "\n" )
			data = s.recv( 8192 )
			s.close()
			return json.loads( data )
		except:
			return  { 'response': 'error' }

	def do_GET ( self ):
		# Quick & dirty path handling!
		url = self.path.split( '?' )
		path = url[0]
		args = {}
		for pair in '?'.join( url[1:] ).split( '&' ):
			split = pair.split( '=' )
			if '' == split[0].strip():
				continue
			args[split[0]] = '='.join( split[1:] )

		# Send the default header
		self.wfile.write( self.header )

		# Now serve based on path
		if path == '/':
			response = self.do_request( { 'method': 'list' } )
			if response['response'] == 'list':
				self.wfile.write( """
<form action="/set" method="GET">
	<table class="form">
		<tr>
			<th>Host:</th>
			<td><input type="text" name="host" /></td>
		</tr>
		<tr>
			<th>IP:</th>
			<td><input type="text" name="ip" /></td>
		</tr>
		<tr>
			<th colspan="2"><input type="submit" value="Set" /></th>
		</tr>
	</table>
</form>

<table>
	<tr>
		<th>Host</th>
		<th>IP</th>
		<th>Delete</th>
	</tr>
"""
				)
				self.wfile.write( "\n" )
				for pair in response['pairs']:
					self.wfile.write( "<tr><td>%s</td><td>%s</td><td><a href=\"/delete?host=%s\">Delete</a></tr>\n" % ( pair['host'], pair['ip'],  pair['host'] ) )
				self.wfile.write( "</table>\n" )
			else:
				self.wfile.write( self.error_text )
		elif path == '/set':
			response = self.do_request( { 'method': 'set', 'pairs': [ { 'host': args['host'], 'ip': args['ip'] } ] } )
			if response['response'] == 'set':
				self.wfile.write( '<h2>Set %s to %s</h2>' % ( args['host'], args['ip'] ) )
				self.wfile.write( '<p><a href="/">Back</a></p>' )
			else:
				self.wfile.write( self.error_text )
		elif path == '/delete':
			response = self.do_request( { 'method': 'delete', 'hosts': [ args['host'] ] } )
			if response['response'] == 'deleted':
				self.wfile.write( '<h2>Deleted %s</h2>' % args['host'] )
				self.wfile.write( '<p><a href="/">Back</a></p>' )
			else:
				self.wfile.write( self.error_text )
		else:
			self.wfile.write( '<h1>404 - Not Found</h1>' )
			self.send_response( 404 )
			return
		self.wfile.write( self.footer )

if options.daemonize:
	import daemon
	import syslog
	import traceback
	with daemon.DaemonContext():
		try:
			httpd = SocketServer.ForkingTCPServer( ( '127.0.0.1', options.port ), DetoursHandler )
			httpd.serve_forever()
		except Exception, e:
			syslog.syslog( traceback.format_exc()  )
			exit()
else:
	print "serving at port", options.port
	try:
		httpd = SocketServer.ForkingTCPServer( ( '127.0.0.1', options.port ), DetoursHandler )
		httpd.serve_forever()
	except KeyboardInterrupt:
		exit()
	except Exception, e:
		print str( e )
		exit()